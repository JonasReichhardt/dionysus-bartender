{"ast":null,"code":"export default {\n  name: \"DionysusApp\",\n\n  data() {\n    return {\n      pumpvals: null,\n      pumpvalscopy: null,\n      roundedPumpVals: null,\n      enablepump: null,\n      ingredients: null,\n      loaded: false\n    };\n  },\n\n  created: async function () {\n    let response = await fetch(\"http://localhost:8081/ingredients\");\n\n    if (response.ok) {\n      // if HTTP-status is 200-299\n      // get the response body (the method explained below)\n      this.ingredients = await response.json();\n      this.pumpvals = null;\n      this.loaded = true;\n    } else {\n      alert(\"HTTP-Error: \" + response.status);\n    }\n  },\n  methods: {\n    normalizeVals: function (index) {\n      console.log(\"Before values of pumpvals: \" + this.pumpvals[0] + \" \" + this.pumpvals[1] + \" \" + this.pumpvals[2] + \" \" + this.pumpvals[3] + \" \" + this.pumpvals[4] + \" \" + this.pumpvals[5]);\n      let absDiff = this.pumpvals[index] - this.pumpvalscopy[index];\n      let currPump = index;\n      let nActivePumps = 0;\n\n      if (this.pumpvals[index] > 1) {\n        this.enablepump[index] = true;\n      }\n\n      for (let i in this.enablepump) {\n        //compute num of active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n\n      let DiffPerPump = -1 * (absDiff / (nActivePumps - 1));\n\n      for (var i = 0; i < this.pumpvals.length; i++) {\n        if (this.enablepump[i] && i != index) {\n          let x = this.pumpvals[i] + Math.round(DiffPerPump);\n\n          if (x < 0.5) {\n            this.enablepump[i] = false;\n          } //disable pumps with val < 0.5, if x>= 0.5 it is rounded up to 1\n\n\n          this.pumpvals[i] = x <= 0 ? 0 : x;\n        }\n      }\n\n      nActivePumps = 0;\n\n      for (let i in this.enablepump) {\n        //compute num of the current active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n\n      let sum = 0;\n\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //get sum of pumpvals\n        sum += this.pumpvals[i] * 1;\n      }\n\n      let sumDiff = sum - 100; // check if the new sum is bigger than 100\n\n      let newDiffPer = sumDiff / nActivePumps;\n\n      for (let i in this.enablepump) {\n        //subtract the diff to 100, so the sum of all vals equal to 100\n        if (this.enablepump[i]) {\n          this.pumpvals[i] -= newDiffPer;\n        }\n      }\n\n      let newSum = 0;\n\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        newSum += this.pumpvals[i] * 1;\n      }\n\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //update pumpvalscopy\n        this.pumpvalscopy[i] = this.pumpvals[i];\n      }\n\n      console.log(this.enablepump[0] + \" \" + this.enablepump[1] + \" \" + this.enablepump[2] + \" \" + this.enablepump[3] + \" \" + this.enablepump[4] + \" \" + this.enablepump[5]);\n      console.log(\"absDiff: \" + absDiff + \"\\ncurrPump: \" + currPump + \"\\nnActivePumps: \" + nActivePumps + \"\\nDiffPerPump: \" + DiffPerPump + \"\\nsum: \" + sum + \"\\nnewSum: \" + newSum);\n      console.log(\"After the function: \" + this.pumpvalscopy[0] + \" \" + this.pumpvalscopy[1] + \" \" + this.pumpvalscopy[2] + \" \" + this.pumpvalscopy[3] + \" \" + this.pumpvalscopy[4] + \" \" + this.pumpvalscopy[5]);\n      console.log(\" \");\n    },\n    roundVals: function () {\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        this.roundedPumpVals[i] = this.pumpvals[i].toFixed(0);\n      }\n    },\n    changeCheckBox: function (index) {\n      this.enablepump[index] = !this.enablepump[index];\n\n      if (!this.enablepump[index]) {\n        this.pumpvals[index] = 0;\n      }\n    },\n    passNewVal: function (index) {\n      //pass new roundedVal to pumpvals, otherwise \"normalizeVals()\" doesnt work or new val in number input isnt updated\n      this.pumpvals[index] = this.roundedPumpVals[index];\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","pumpvals","pumpvalscopy","roundedPumpVals","enablepump","ingredients","loaded","created","response","fetch","ok","json","alert","status","methods","normalizeVals","index","console","log","absDiff","currPump","nActivePumps","i","DiffPerPump","length","x","Math","round","sum","sumDiff","newDiffPer","newSum","roundVals","toFixed","changeCheckBox","passNewVal"],"sourceRoot":"","sources":["/Users/mehmettasdemir/Desktop/OneDrive/Studium/SS2022/Multimediasysteme/dionysus-bartender/webapp/src/components/DionysusApp.vue"],"sourcesContent":["<template>\n  <div class=\"container\" v-if = \"loaded\">\n    <div class=\"sliders\">\n      <div v-for=\"ing in ingredients\" :key=\"ing\">\n      {{ing}}\n      <span>\n        <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            class=\"\"\n            v-model.number=\"pumpvals[0]\"\n            @change=\"\n              normalizeVals(0);\n              roundVals();\n            \"\n          />\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            class=\"\"\n            v-model.number=\"roundedPumpVals[0]\"\n            @change=\"\n              passNewVal(0);\n              normalizeVals(0);\n              roundVals();\n            \"\n          />\n          \n      </span>\n    </div>\n    </div> \n    <div class=\"pictures\">pictures</div>\n    <div class=\"buttons\">\n      buttons <br />\n      <input type=\"button\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"DionysusApp\",\n  data() {\n    return {\n      pumpvals: null,\n      pumpvalscopy: null,\n      roundedPumpVals: null,\n      enablepump: null,\n      ingredients: null,\n      loaded: false\n    };\n  },\n  created: async function () {\n    let response = await fetch(\"http://localhost:8081/ingredients\");\n\n    if (response.ok) {\n      // if HTTP-status is 200-299\n      // get the response body (the method explained below)\n      this.ingredients = await response.json();\n      this.pumpvals = null;\n      this.loaded = true;\n    } else {\n      alert(\"HTTP-Error: \" + response.status);\n    }\n  },\n  methods: {\n    normalizeVals: function (index) {\n      console.log(\n        \"Before values of pumpvals: \" +\n          this.pumpvals[0] +\n          \" \" +\n          this.pumpvals[1] +\n          \" \" +\n          this.pumpvals[2] +\n          \" \" +\n          this.pumpvals[3] +\n          \" \" +\n          this.pumpvals[4] +\n          \" \" +\n          this.pumpvals[5]\n      );\n      let absDiff = this.pumpvals[index] - this.pumpvalscopy[index];\n      let currPump = index;\n      let nActivePumps = 0;\n\n      if (this.pumpvals[index] > 1) {\n        this.enablepump[index] = true;\n      }\n\n      for (let i in this.enablepump) {\n        //compute num of active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n      let DiffPerPump = -1 * (absDiff / (nActivePumps - 1));\n\n      for (var i = 0; i < this.pumpvals.length; i++) {\n        if (this.enablepump[i] && i != index) {\n          let x = this.pumpvals[i] + Math.round(DiffPerPump);\n          if (x < 0.5) {\n            this.enablepump[i] = false;\n          } //disable pumps with val < 0.5, if x>= 0.5 it is rounded up to 1\n          this.pumpvals[i] = x <= 0 ? 0 : x;\n        }\n      }\n\n      nActivePumps = 0;\n      for (let i in this.enablepump) {\n        //compute num of the current active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n\n      let sum = 0;\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //get sum of pumpvals\n        sum += this.pumpvals[i] * 1;\n      }\n\n      let sumDiff = sum - 100; // check if the new sum is bigger than 100\n      let newDiffPer = sumDiff / nActivePumps;\n\n      for (let i in this.enablepump) {\n        //subtract the diff to 100, so the sum of all vals equal to 100\n        if (this.enablepump[i]) {\n          this.pumpvals[i] -= newDiffPer;\n        }\n      }\n\n      let newSum = 0;\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        newSum += this.pumpvals[i] * 1;\n      }\n\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //update pumpvalscopy\n        this.pumpvalscopy[i] = this.pumpvals[i];\n      }\n\n      console.log(\n        this.enablepump[0] +\n          \" \" +\n          this.enablepump[1] +\n          \" \" +\n          this.enablepump[2] +\n          \" \" +\n          this.enablepump[3] +\n          \" \" +\n          this.enablepump[4] +\n          \" \" +\n          this.enablepump[5]\n      );\n      console.log(\n        \"absDiff: \" +\n          absDiff +\n          \"\\ncurrPump: \" +\n          currPump +\n          \"\\nnActivePumps: \" +\n          nActivePumps +\n          \"\\nDiffPerPump: \" +\n          DiffPerPump +\n          \"\\nsum: \" +\n          sum +\n          \"\\nnewSum: \" +\n          newSum\n      );\n      console.log(\n        \"After the function: \" +\n          this.pumpvalscopy[0] +\n          \" \" +\n          this.pumpvalscopy[1] +\n          \" \" +\n          this.pumpvalscopy[2] +\n          \" \" +\n          this.pumpvalscopy[3] +\n          \" \" +\n          this.pumpvalscopy[4] +\n          \" \" +\n          this.pumpvalscopy[5]\n      );\n      console.log(\" \");\n    },\n    roundVals: function () {\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        this.roundedPumpVals[i] = this.pumpvals[i].toFixed(0);\n      }\n    },\n    changeCheckBox: function (index) {\n      this.enablepump[index] = !this.enablepump[index];\n      if (!this.enablepump[index]) {\n        this.pumpvals[index] = 0;\n      }\n    },\n    passNewVal: function (index) {\n      //pass new roundedVal to pumpvals, otherwise \"normalizeVals()\" doesnt work or new val in number input isnt updated\n      this.pumpvals[index] = this.roundedPumpVals[index];\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n.container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-auto-columns: minmax(0, 1fr);\n  grid-template-columns: 50% 50%;\n  grid-template-rows: 85% 1fr;\n  grid-template-areas:\n    \"slider pictures\"\n    \"slider buttons\";\n  gap: 5px;\n  padding: 5px;\n  box-sizing: border-box;\n}\n.sliders {\n  grid-area: slider;\n  background-color: powderblue;\n  font-size: 0.7em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-start;\n  padding: 0.4em;\n  gap: 0.3em;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n}\n.sliders input[type=\"number\"] {\n  width: 2.5em;\n}\n.pictures {\n  grid-area: pictures;\n  background-color: red;\n}\n.buttons {\n  grid-area: buttons;\n  background-color: green;\n}\n.container div {\n  font-size: 0.7em;\n  padding: 0.1em;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}