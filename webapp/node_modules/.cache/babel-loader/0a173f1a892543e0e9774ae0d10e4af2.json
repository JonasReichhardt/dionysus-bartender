{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0,\n  class: \"container\"\n};\nconst _hoisted_2 = {\n  class: \"sliders\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"pictures\"\n}, \"pictures\", -1\n/* HOISTED */\n);\n\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"buttons\"\n}, [/*#__PURE__*/_createTextVNode(\" buttons \"), /*#__PURE__*/_createElementVNode(\"br\"), /*#__PURE__*/_createElementVNode(\"input\", {\n  type: \"button\"\n})], -1\n/* HOISTED */\n);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.loaded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.ingredients, ing => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: ing\n    }, [_createTextVNode(_toDisplayString(ing) + \" \", 1\n    /* TEXT */\n    ), _createElementVNode(\"span\", null, [_withDirectives(_createElementVNode(\"input\", {\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.pumpvals[_ctx.index] = $event),\n      onChange: _cache[1] || (_cache[1] = $event => {\n        $options.normalizeVals(_ctx.index);\n        $options.roundVals();\n      })\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, $data.pumpvals[_ctx.index], void 0, {\n      number: true\n    }]]), _withDirectives(_createElementVNode(\"input\", {\n      type: \"number\",\n      min: \"0\",\n      max: \"100\",\n      \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.roundedPumpVals[_ctx.index] = $event),\n      onChange: _cache[3] || (_cache[3] = $event => {\n        $options.passNewVal(_ctx.index);\n        $options.normalizeVals(_ctx.index);\n        $options.roundVals();\n      })\n    }, null, 544\n    /* HYDRATE_EVENTS, NEED_PATCH */\n    ), [[_vModelText, $data.roundedPumpVals[_ctx.index], void 0, {\n      number: true\n    }]])])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  ))]), _hoisted_3, _hoisted_4])) : _createCommentVNode(\"v-if\", true);\n}","map":{"version":3,"mappings":";;;AACOA,OAAK,EAAC;;;AACJA,OAAK,EAAC;;;gCA4BXC,oBAAoC,KAApC,EAAoC;AAA/BD,OAAK,EAAC;AAAyB,CAApC,EAAsB,UAAtB,EAA8B;AAAA;AAA9B;;gCACAC,oBAGM,KAHN,EAGM;AAHDD,OAAK,EAAC;AAGL,CAHN,EAAoB,+BAAC,YAAD,eACVC,oBAAM,IAAN,CADU,eAElBA,oBAAuB,OAAvB,EAAuB;AAAhBC,MAAI,EAAC;AAAW,CAAvB,CAFkB,CAApB;;AAAA;;;SA9B6BC,8BAA/BC,oBAkCM,KAlCN,cAkCM,CAjCJH,oBA2BM,KA3BN,cA2BM,oBA1BJG,oBAyBIC,SAzBJ,EAyBI,IAzBJ,EAyBIC,YAzBiBH,iBAyBjB,EAzBSI,GAAmB,IAAhB;yBAAhBH,oBAyBI,KAzBJ,EAyBI;AAzB+BI,SAAG,EAAED;AAyBpC,KAzBJ,EAA2C,mCACzCA,OAAK,KACP;AAAA;KAF2C,EAE3CN,oBAsBO,MAtBP,EAsBO,IAtBP,EAsBO,iBArBLA,oBASI,OATJ,EASI;AARAC,UAAI,EAAC,OAQL;AAPAO,SAAG,EAAC,GAOJ;AANAC,SAAG,EAAC,KAMJ;iEALgBP,eAASQ,UAAT,IAAcC,OAK9B;AAJCC,cAAM;AAAiBC,+BAAcH,UAAd;AAAoCG;OAArD;AAIP,KATJ;;AAAA,sBAIoBX,eAASQ,UAAT;cAAhB;QAiBC,kBAXHV,oBAUE,OAVF,EAUE;AATAC,UAAI,EAAC,QASL;AARAO,SAAG,EAAC,GAQJ;AAPAC,SAAG,EAAC,KAOJ;iEANgBP,sBAAgBQ,UAAhB,IAAqBC,OAMrC;AALCC,cAAM;AAAiBC,4BAAWH,UAAX;AAAiCG,+BAAcH,UAAd;AAAoCG;OAAtF;AAKP,KAVF;;AAAA,sBAIkBX,sBAAgBQ,UAAhB;cAAhB;QAOC,CAtBP,CAF2C,CAA3C;GAyBI,CAzBJ;;AAAA,GA0BI,EA3BN,CAiCI,EALJI,UAKI,EAJJC,UAII,CAlCN","names":["class","_createElementVNode","type","$data","_createElementBlock","_Fragment","_renderList","ing","key","min","max","_ctx","$event","onChange","$options","_hoisted_3","_hoisted_4"],"sourceRoot":"","sources":["/Users/mehmettasdemir/Desktop/OneDrive/Studium/SS2022/Multimediasysteme/dionysus-bartender/webapp/src/components/DionysusApp.vue"],"sourcesContent":["<template>\n  <div class=\"container\" v-if = \"loaded\">\n    <div class=\"sliders\">\n      <div v-for=\"(ing) in ingredients\" :key=\"ing\">\n      {{ing}}\n      <span>\n        <input\n            type=\"range\"\n            min=\"0\"\n            max=\"100\"\n            v-model.number=\"pumpvals[index]\"\n            @change=\"\n              normalizeVals(index);\n              roundVals();\n            \"\n          />\n          <input\n            type=\"number\"\n            min=\"0\"\n            max=\"100\"\n            v-model.number=\"roundedPumpVals[index]\"\n            @change=\"\n              passNewVal(index);\n              normalizeVals(index);\n              roundVals();\n            \"\n          /> \n      </span>\n    </div>\n    </div> \n    <div class=\"pictures\">pictures</div>\n    <div class=\"buttons\">\n      buttons <br />\n      <input type=\"button\" />\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"DionysusApp\",\n  data() {\n    return {\n      pumpvals: null,\n      pumpvalscopy: null,\n      roundedPumpVals: null,\n      enablepump: null,\n      ingredients: null,\n      loaded: false\n    };\n  },\n  created: async function () {\n    let response = await fetch(\"http://localhost:8081/ingredients\");\n\n    if (response.ok) {\n      // if HTTP-status is 200-299\n      // get the response body (the method explained below)\n      this.ingredients = await response.json();\n      let initialVal = 100/this.ingredients.length;\n      this.pumpvals = Array(this.ingredients.length);\n      this.pumpvals.forEach(x => {this.pumpvals.push(initialVal)});\n      this.loaded = true;\n    } else {\n      alert(\"HTTP-Error: \" + response.status);\n    }\n  },\n  methods: {\n    normalizeVals: function (index) {\n      console.log(\n        \"Before values of pumpvals: \" +\n          this.pumpvals[0] +\n          \" \" +\n          this.pumpvals[1] +\n          \" \" +\n          this.pumpvals[2] +\n          \" \" +\n          this.pumpvals[3] +\n          \" \" +\n          this.pumpvals[4] +\n          \" \" +\n          this.pumpvals[5]\n      );\n      let absDiff = this.pumpvals[index] - this.pumpvalscopy[index];\n      let currPump = index;\n      let nActivePumps = 0;\n\n      if (this.pumpvals[index] > 1) {\n        this.enablepump[index] = true;\n      }\n\n      for (let i in this.enablepump) {\n        //compute num of active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n      let DiffPerPump = -1 * (absDiff / (nActivePumps - 1));\n\n      for (var i = 0; i < this.pumpvals.length; i++) {\n        if (this.enablepump[i] && i != index) {\n          let x = this.pumpvals[i] + Math.round(DiffPerPump);\n          if (x < 0.5) {\n            this.enablepump[i] = false;\n          } //disable pumps with val < 0.5, if x>= 0.5 it is rounded up to 1\n          this.pumpvals[i] = x <= 0 ? 0 : x;\n        }\n      }\n\n      nActivePumps = 0;\n      for (let i in this.enablepump) {\n        //compute num of the current active pumps\n        if (this.enablepump[i]) {\n          nActivePumps++;\n        }\n      }\n\n      let sum = 0;\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //get sum of pumpvals\n        sum += this.pumpvals[i] * 1;\n      }\n\n      let sumDiff = sum - 100; // check if the new sum is bigger than 100\n      let newDiffPer = sumDiff / nActivePumps;\n\n      for (let i in this.enablepump) {\n        //subtract the diff to 100, so the sum of all vals equal to 100\n        if (this.enablepump[i]) {\n          this.pumpvals[i] -= newDiffPer;\n        }\n      }\n\n      let newSum = 0;\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        newSum += this.pumpvals[i] * 1;\n      }\n\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        //update pumpvalscopy\n        this.pumpvalscopy[i] = this.pumpvals[i];\n      }\n\n      console.log(\n        this.enablepump[0] +\n          \" \" +\n          this.enablepump[1] +\n          \" \" +\n          this.enablepump[2] +\n          \" \" +\n          this.enablepump[3] +\n          \" \" +\n          this.enablepump[4] +\n          \" \" +\n          this.enablepump[5]\n      );\n      console.log(\n        \"absDiff: \" +\n          absDiff +\n          \"\\ncurrPump: \" +\n          currPump +\n          \"\\nnActivePumps: \" +\n          nActivePumps +\n          \"\\nDiffPerPump: \" +\n          DiffPerPump +\n          \"\\nsum: \" +\n          sum +\n          \"\\nnewSum: \" +\n          newSum\n      );\n      console.log(\n        \"After the function: \" +\n          this.pumpvalscopy[0] +\n          \" \" +\n          this.pumpvalscopy[1] +\n          \" \" +\n          this.pumpvalscopy[2] +\n          \" \" +\n          this.pumpvalscopy[3] +\n          \" \" +\n          this.pumpvalscopy[4] +\n          \" \" +\n          this.pumpvalscopy[5]\n      );\n      console.log(\" \");\n    },\n    roundVals: function () {\n      for (let i = 0; i < this.pumpvals.length; i++) {\n        this.roundedPumpVals[i] = this.pumpvals[i].toFixed(0);\n      }\n    },\n    changeCheckBox: function (index) {\n      this.enablepump[index] = !this.enablepump[index];\n      if (!this.enablepump[index]) {\n        this.pumpvals[index] = 0;\n      }\n    },\n    passNewVal: function (index) {\n      //pass new roundedVal to pumpvals, otherwise \"normalizeVals()\" doesnt work or new val in number input isnt updated\n      this.pumpvals[index] = this.roundedPumpVals[index];\n    },\n  },\n};\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style>\n.container {\n  display: grid;\n  width: 100vw;\n  height: 100vh;\n  grid-auto-columns: minmax(0, 1fr);\n  grid-template-columns: 50% 50%;\n  grid-template-rows: 85% 1fr;\n  grid-template-areas:\n    \"slider pictures\"\n    \"slider buttons\";\n  gap: 5px;\n  padding: 5px;\n  box-sizing: border-box;\n}\n.sliders {\n  grid-area: slider;\n  background-color: powderblue;\n  font-size: 0.7em;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-start;\n  padding: 0.4em;\n  gap: 0.3em;\n  flex: 1 1 auto;\n  flex-wrap: wrap;\n}\n.sliders input[type=\"number\"] {\n  width: 2.5em;\n}\n.pictures {\n  grid-area: pictures;\n  background-color: red;\n}\n.buttons {\n  grid-area: buttons;\n  background-color: green;\n}\n.container div {\n  font-size: 0.7em;\n  padding: 0.1em;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}